{"version":3,"sources":["components/PhotoManagerForm/PhotoManagerForm.jsx","components/PhotoManagerGallery/PhotoManagerGallery.jsx","components/PhotoManager/PhotoManager.jsx","App.js","reportWebVitals.js","index.js"],"names":["InputOverlapped","styled","input","Container","div","Overlap","label","PhotoManagerForm","props","className","id","type","multiple","onChange","evt","Array","from","target","files","filter","el","match","length","onSelect","value","htmlFor","display","flexWrap","WrapperImage","Image","img","Button","button","position","top","right","borderStyle","backgroundColor","cursor","fontSize","EmptyBlock","PhotoManagerGallery","onDelete","dataset","images","map","image","src","alt","name","data-id","onClick","emptyBlocks","push","nanoid","Wrapper","PhotoManager","useState","setImages","forEach","file","fileReader","FileReader","onload","result","prev","readAsDataURL","document","getElementById","blur","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.23fbd0a2.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst InputOverlapped = styled.input`\n  clip: rect(0, 0, 0, 0);\n  position: absolute;\n`\n\nconst Container = styled.div`\n  width: 1200px;\n  position: relative;\n`\n\nconst Overlap = styled.label`\n  width: 100%;\n  height: 300px;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 2px solid black;\n  border-radius: 10px;\n  font-size: 3rem;\n\n  input:focus + & {\n    outline: 1px dotted #000;\n    outline: -webkit-focus-ring-color auto 5px;\n    outline-offset: 6px;\n  }\n`\n\nfunction PhotoManagerForm(props) {\n  const onSelect = (evt) => {\n    const files = Array.from(evt.target.files).filter((el) => el.type.match(/image\\/./))\n\n    if (files.length) {\n      props.onSelect(evt)\n    }\n    evt.target.value = null\n  }\n  return (\n    <div className=\"PhotoManagerForm\">\n      <Container>\n        <InputOverlapped id=\"file\" type=\"file\" multiple onChange={onSelect} />\n        <Overlap htmlFor=\"file\">Click to select</Overlap>\n      </Container>\n    </div>\n  )\n}\n\nPhotoManagerForm.propTypes = {\n  onSelect: PropTypes.func.isRequired,\n}\n\nexport default PhotoManagerForm\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { nanoid } from 'nanoid'\n\nconst Container = styled.div({\n  display: 'flex',\n  flexWrap: 'wrap',\n})\n\nconst WrapperImage = styled.div`\n  position: relative;\n  margin: 20px;\n  margin-bottom: 10px;\n  padding-top: 10px;\n\n  &:hover > button {\n    display: block;\n  }\n`\n\nconst Image = styled.img`\n  display: block;\n  width: 200px;\n  height: 200px;\n\n  object-fit: cover;\n`\nconst Button = styled.button({\n  position: 'absolute',\n  display: 'none',\n  top: '-20px',\n  right: '-10px',\n  borderStyle: 'none',\n  backgroundColor: 'inherit',\n  cursor: 'pointer',\n  fontSize: '30px',\n})\n\nconst EmptyBlock = styled.div`\n  width: 200px;\n  height: 200px;\n  margin: 20px;\n  margin-bottom: 10px;\n  padding-top: 10px;\n  font-size: 200px;\n  color: #c3c3c3;\n`\n\nfunction PhotoManagerGallery(props) {\n  const onDelete = (evt) => {\n    props.onDelete(evt.target.dataset.id)\n  }\n\n  const images = props.images.map((image) => (\n    <WrapperImage key={image.id}>\n      <Image src={image.src} alt={image.name}></Image>\n      <Button data-id={image.id} onClick={onDelete}>\n        âœ˜\n      </Button>\n    </WrapperImage>\n  ))\n\n  let emptyBlocks = []\n\n  if (images.length < 3) {\n    while (images.length + emptyBlocks.length < 3) {\n      emptyBlocks.push(\n        <EmptyBlock key={nanoid()} className=\"material-icons\">\n          border_clear\n        </EmptyBlock>\n      )\n    }\n  } else {\n    emptyBlocks.push(\n      <EmptyBlock key={nanoid()} className=\"material-icons\">\n        border_clear\n      </EmptyBlock>\n    )\n  }\n\n  return (\n    <Container>\n      {images}\n      {emptyBlocks}\n    </Container>\n  )\n}\n\nPhotoManagerGallery.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default PhotoManagerGallery\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport PhotoManagerForm from '../PhotoManagerForm/PhotoManagerForm'\nimport { nanoid } from 'nanoid'\nimport PhotoManagerGallery from '../PhotoManagerGallery/PhotoManagerGallery'\n\nconst Wrapper = styled.div`\n  margin-top: 50px;\n`\n\nfunction PhotoManager(props) {\n  const [images, setImages] = useState(props.images)\n\n  const handleSelect = (evt) => {\n    let files = [...evt.target.files]\n    files.forEach((file) => {\n      const fileReader = new FileReader()\n      fileReader.onload = () => {\n        file.id = nanoid()\n\n        file.src = fileReader.result\n        setImages((prev) => [...prev, file])\n      }\n      fileReader.readAsDataURL(file)\n    })\n    document.getElementById('file').blur()\n  }\n\n  const handleDelete = (id) => {\n    setImages(() => images.filter((image) => image.id !== id))\n  }\n\n  return (\n    <Wrapper>\n      <PhotoManagerForm onSelect={handleSelect} />\n      <PhotoManagerGallery images={images} onDelete={handleDelete} />\n    </Wrapper>\n  )\n}\n\nPhotoManager.defaultProps = {\n  images: [],\n}\n\nPhotoManager.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.object),\n}\n\nexport default PhotoManager\n","import './App.css'\nimport PhotoManager from './components/PhotoManager/PhotoManager'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PhotoManager />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}